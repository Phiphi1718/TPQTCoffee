import React, { useEffect, useState } from 'react';
import './IceBlendedPage.css'; // File CSS cho trang "Ice Blended"
import ProductModal from '../components/ProductModal'; // Import modal chi ti·∫øt s·∫£n ph·∫©m
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faShoppingCart } from '@fortawesome/free-solid-svg-icons';
import FloatingButton from '../components/FloatingButton'; // Import n√∫t hotline
import CartButton from '../components/CartButton'; // Import n√∫t gi·ªè h√†ng

const IceBlendedPage = () => {
  const [products, setProducts] = useState([]);
  const [selectedProduct, setSelectedProduct] = useState(null); // S·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ hi·ªÉn th·ªã modal
  const [isLoading, setIsLoading] = useState(true); // Tr·∫°ng th√°i ƒëang t·∫£i
  const [error, setError] = useState(null); // Tr·∫°ng th√°i l·ªói

  useEffect(() => {
    // G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m
    fetch('https://localhost:7095/api/Product/getall')
      .then((response) => {
        if (!response.ok) {
          throw new Error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu'); // N·∫øu fetch th·∫•t b·∫°i, throw l·ªói
        }
        return response.json();
      })
      .then((data) => {
        if (data?.$values) {
          // L·ªçc s·∫£n ph·∫©m theo danh m·ª•c "Ice Blended"
          const iceBlendedProducts = data.$values.filter(
            (product) => product.categoryName === 'Ice Blended'
          );
          setProducts(iceBlendedProducts);
        } else {
          console.error('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá:', data);
        }
      })
      .catch((error) => {
        setError(error.message); // L∆∞u th√¥ng b√°o l·ªói v√†o state
      })
      .finally(() => {
        setIsLoading(false); // K·∫øt th√∫c qu√° tr√¨nh t·∫£i d·ªØ li·ªáu
      });
  }, []);

  const handleProductClick = (product) => {
    setSelectedProduct(product); // M·ªü modal chi ti·∫øt s·∫£n ph·∫©m
  };

  const handleCloseModal = () => {
    setSelectedProduct(null); // ƒê√≥ng modal
  };

  return (
    <div className="ice-blended-page-container">
      {/* Ti√™u ƒë·ªÅ lu√¥n hi·ªÉn th·ªã tr√™n ƒë·∫ßu */}
      <div className="ice-blended-section-title">Ice Blended</div>

      {/* Hi·ªÉn th·ªã th√¥ng b√°o khi ƒëang t·∫£i ho·∫∑c c√≥ l·ªói */}
      {isLoading || error ? (
        <div className="ü§ö">  
        <div className="üëâ"></div>
        <div className="üëâ"></div>
        <div className="üëâ"></div>
        <div className="üëâ"></div>
        <div className="üå¥"></div>		
        <div className="üëç"></div>
      </div>
      ) : (
        <>
          <div className="ice-blended-section-subtitle">
            Ice Blended l√† s·ª± k·∫øt h·ª£p ho√†n h·∫£o gi·ªØa ƒë√° xay v√† h∆∞∆°ng v·ªã ƒëa d·∫°ng, mang ƒë·∫øn tr·∫£i nghi·ªám t∆∞∆°i m√°t, s·∫£ng kho√°i.
          </div>
          <div className="ice-blended-product-grid">
            {products.map((product) => (
              <IceBlendedProductCard
                key={product.id}
                product={product}
                onBuy={() => handleProductClick(product)}
              />
            ))}
          </div>

          {/* Hi·ªÉn th·ªã modal chi ti·∫øt s·∫£n ph·∫©m */}
          {selectedProduct && (
            <ProductModal product={selectedProduct} onClose={handleCloseModal} />
          )}

          {/* Hi·ªÉn th·ªã n√∫t gi·ªè h√†ng v√† hotline */}
          <CartButton />
          <FloatingButton />
        </>
      )}
    </div>
  );
};

const IceBlendedProductCard = ({ product, onBuy }) => {
  // X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n h√¨nh ·∫£nh
  const imageUrl = `https://localhost:7095/${product.imageUrl}`;

  return (
    <div className="ice-blended-product-card">
      <img src={imageUrl} alt={product.name} />
      <div className="ice-blended-product-name">{product.name}</div>
      <div className="ice-blended-product-price">{product.price.toLocaleString()} ƒë</div>
      <button className="ice-blended-btn-buy" onClick={onBuy}>
        <FontAwesomeIcon icon={faShoppingCart} /> ƒê·∫∑t mua
      </button>
    </div>
  );
};

export default IceBlendedPage;
